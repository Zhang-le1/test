"""
    类的结构
    一、实例
    1.使用面向对象开发，第一步是设计类
    2.使用 类名() 创建对象，创建对象的动作有两步
        ①在内存中为对象分配空间
        ②调用初始化方法__init__ 为对象初始化
    3.对象创建后，内存中就有了一个对象的实实在在的存在--实例

    通常：
    创建出来对象叫做类的实例
    创建对象的动作叫做实例化
    对象的属性叫做实例属性
    对象调用的方法叫做实例方法

    结论：
    每一个对象都有自己独立的内存空间，保存各自不同的属性
    多个对象的方法，在内存中只有一份，在调用方法时，需要把对象的引用传递到方法的内部
"""
"""
    类是一个特殊的对象
        class AAA: 定义的类属于类对象
        obj = AAA() 属于 实例对象
    在程序运行时，类同样会被加载到内存
    类是一个特殊的对象--类对象
    在程序运行时，类对象在内存中只有一份，使用一个类可以创建出很多个对象实例
    除了封装实例的属性和方法外，类对象还可以拥有自己的属性和方法
    1.类属性
        类属性就是给类对象中定义的属性
        通常用来记录与这个类相关的特征
        类属性不会用于记录具体对象的特征
    2.类方法
    通过 类名. 的方式可以访问类的属性 或者 调用类的方法
"""
"""
    需求：
    定义一个 工具类
    每件工具都有自己的 name
    须知道使用这个类创建了多少个工具对象
"""


class Tool(object):
    # 使用赋值语句定义类属性，记录所有工具对象的数量
    count = 0

    def __init__(self, name):
        self.name = name

        # 让类属性的值+1
        Tool.count += 1


# 1.创建工具对象
tool1 = Tool("斧头")
tool2 = Tool("榔头")
tool3 = Tool("水桶")

# 2.输出工具对象的总数
print(Tool.count)
